# -*- coding: utf-8 -*-
"""V6 V7 process and automation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kj9njUpJkJ6hAxrLaUi4EYeZu0u9L1O_
"""



"""# Install"""

!python -V

import json
import requests

#@title Install helper SDK from github

!pip install --verbose git+https://github.com/unjournal/pypubpub@main

import pypubpub

"""# Initialize"""

#@title initialize and login
from google.colab import userdata
nesim_pass = userdata.get("nesim_pass")
pub_helper_v6=pypubpub.Pubshelper_v6(
    community_url="https://testabcd123456789.pubpub.org",
    community_id="fce230e8-c211-40e1-8a34-60a65c1aad08",
    password=nesim_pass,
    email="nesim.engineer@gmail.com"
    )
pub_helper_v6.login()

#@title Confirm pub access by performing Get operation
pubs_v6 = pub_helper_v6.get_many_pubs()

# import re

evals=[1,2,"a", "b"]
for e in range(len(evals)):
  print( e, " ; ",evals[e])

import re

def isMaybePubId(t:str):
  t2 = re.sub(r"\s+|-","", t )
  if(not len(t2)==32):
    return False
  t3 = re.sub(r"[a-f0-9]", "", t2.casefold())
  if(len(t3)==0):
    return True
  else:
    return False

def resolve_original(o_id:str, parent_url:str, blank_pub="blank_pub"):
  """
    check if external paper has an existing Pubpub id
    if not create one by making a link from a Pubpub pub to the external resource
  """
  if isMaybePubId(o_id):
    pubgotten = pub_helper_v6.getPubByIdorSlug(o_id)
    if pubgotten:
      return o_id
  blank_pub_dict = pub_helper_v6.getPubByIdorSlug(blank_pub)
  if(not blank_pub_dict):
    blank_pub_dict = pub_helper_v6.create_pub(slug=blank_pub, title="blank pub", description="blank pub")


  # if(len(o_id)==len("fce230e8-c211-40e1-8a34-60a65c1aad08") or len(o_id)==len("fce230e8c21140e18a3460a65c1aad08")):
  #   pass

def create_pubs(
    original_paper="pubid or external url or doi",
    evals=[
        {"slug":"eval01", "author":"anonymous"},
        {"slug":"eval02", "author": "pubIDXX"}
    ]
):
  #link
  # original_paper_res = resolve_original(original_paper)
  isValidPubId = False
  if isMaybePubId(original_paper):
    (isValidPubId, origPaperPubID ) = validateOrigPaperPubId(original_paper)

  # first create pubs
  createdPubIds = []
  createdPubs = []
  createPubErrors = []
  for e in evals:
    pubArgs = buildArgs(**e, isValidPubId =isValidPubId, origPaperPubID=origPaperPubID)
    pubNew = pub_helper_v6.create_pub(pubArgs)
    if pubNew:
      createdPubIds.append(pubNew.id)
      createdPubs.append(pubNew)
    else:
      createPubErrors.append({"data":pubArgs.copy(), "error":"Unable to create pub"})



  # # link pubs
  # linkPubs(originalPaperPub, createdPubs)
  # for i in range(len(evals)):
  #   pub_helper_v6.connect_pub()



def link_pubs(originalPaperPub:str, pubs:list):
  pubsLinked=[]
  linkErrors=[]
  if(not originalPaperPub):
    # connect to 1st pub and then
  for i in range(len(evals)):
    #connect to parent pub
    pub_helper_v6.connect_pub(srcPubId=)
  return



